{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","style","color","heading","rows","cols","onChange","e","target","value","backgroundColor","uppercase","toUpperCase","showAlert","disabled","length","lowercase","toLowerCase","document","getElementById","navigator","clipboard","writeText","newText","split","join","filter","elem","Alert","height","alert","role","word","lower","charAt","slice","capitalize","message","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1407b089.chunk.js","sourcesContent":["import React  from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { a } from 'react-router-dom'\r\n\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-a\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <a className=\"nav-a\" href=\"/about\">{props.aboutText}</a>\r\n                            </li> */}\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                <div className={`form-check form-switch text-${(props.mode==='light')?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Enable {(props.mode==='light')?'Dark':'Light'} Mode</label>\r\n                </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n\r\n\r\nNavbar.propTypes = { title: PropTypes.string, aboutText: PropTypes.string }\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set Title here\",\r\n    aboutText: \"About Us\"\r\n}","import React,{useState} from 'react'\r\n\r\nconst TextForm = (props) => {\r\n    const [text,setText]=useState('');\r\n    // const [word,setWordLength]=useState('');\r\n\r\n    const handleOnChange =(e)=>{\r\n        setText(e.target.value);\r\n    }\r\n\r\n    //Function to change to uppercase\r\n    const handleUpClick =()=>{\r\n        let uppercase=text.toUpperCase();\r\n        setText(uppercase);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    }\r\n    \r\n    //Function to change to lowercase\r\n    const handleLowerClick =()=>{\r\n        let lowercase=text.toLowerCase();\r\n        setText(lowercase);\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n    }\r\n    \r\n    //Function to clear all data\r\n    const handleClearText =()=>{\r\n        setText('');\r\n        props.showAlert(\"Cleared all data\",\"success\");\r\n    }\r\n    \r\n    //Function to copy all data\r\n    const handleCopy =()=>{\r\n        let text=document.getElementById(\"myBox\");\r\n        // text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        // document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied all data\",\"success\");\r\n    }\r\n    \r\n    //Function toremove extra spaces\r\n    const handleExtraSpaces =()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed Extra Spaces\",\"success\");\r\n    }\r\n    \r\n    // const countword =()=>{\r\n        //     if(text=''){\r\n            //         setWordLength(0);\r\n            //     }else{\r\n                //         let wrd=text.split(\" \").length;\r\n    //         setWordLength(wrd);\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <><div className=\"container\">\r\n            <h1 className=\"mb-4\" style={{color:(props.mode==='light')?'black':'white'}}>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" cols=\"4\" onChange={handleOnChange} value={text}\r\n                style={{backgroundColor:(props.mode==='light')?'#f4e7e7':'#13466e',color:(props.mode==='light')?'black':'white'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary me-3 my-1 \" onClick={handleUpClick} disabled={text.length===0}>Convert To UPPERCASE</button>\r\n            <button className=\"btn btn-primary me-3 my-1\" onClick={handleLowerClick} disabled={text.length===0}>Convert To lowercase</button>\r\n            <button className=\"btn btn-primary me-3 my-1\" onClick={handleClearText} disabled={text.length===0}>Clear Text</button>\r\n            <button className=\"btn btn-primary me-3 my-1\" onClick={handleCopy} disabled={text.length===0}>Copy Text</button>\r\n            <button className=\"btn btn-primary me-3 my-1\" onClick={handleExtraSpaces} disabled={text.length===0}>Remove Extra Spaces</button>\r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{color:(props.mode==='light')?'black':'white'}}>\r\n            <h2>Your Text Summarry...</h2>\r\n            <p>{text.split(/\\s+/).filter((elem)=>{return elem.length!==0}).length} words, {text.length} characters</p>\r\n            <p>You can read above para in {0.008*text.split(\" \").length} Minutes...</p>\r\n            <h2>Your Para Preview...</h2>\r\n            <p>{text.length>0? text:\"Nothing to preview ! Enter text above 🆙 \"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{height:'50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>Holy {capitalize(props.alert.type)}</strong> {props.alert.message}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm'\n// import About from './components/About';\nimport Alert from './components/Alert';\nimport {useState} from 'react';\n// import {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert,setAlert]= useState(null);\n\n  const showAlert =(message,type)=>{\n    setAlert({\n      message:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },2000)\n  }\n\n  const toggleMode =()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      // document.body.style.color='white';\n      showAlert(\"Dark Mode has been enabled\",\"success\");\n      // document.title=\"TextUtils-DarkMode\";\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      // document.body.style.color='black';\n      showAlert(\"Light Mode has been enabled\",\"success\");\n      // document.title=\"TextUtils-LightMode\";\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode}></Navbar>\n      <Alert alert={alert}></Alert>\n      {/* <Switch> */}\n        {/* <Route exact path=\"/\"> */}\n      <div className=\"container my-3\">\n      <TextForm showAlert={showAlert} heading=\"Try TextUtils- Word Counter, Character Counter, Remove Extra Spaces\" mode={mode}></TextForm>\n      </div>\n        {/* </Route> */}\n        {/* <Route exact path=\"/about\"> */}\n      {/* <About mode={mode}></About> */}\n        {/* </Route> */}\n      {/* </Switch> */}\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}